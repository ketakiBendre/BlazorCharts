@page "/energy"
@using Quantaflare.Data
@using Quantaflare.UI.Services
@inject IEnergyClass _iEnergyService;
@inject IHttpContextAccessor HttpContextAccessor;

<h3>Welcome to Energy Data</h3>
<MudSelect T="Streams" Label="Stream" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Class="custom-select">
    <MudSelectItem Value="@(new Streams("location"))" />
    <MudSelectItem Value="@(new Streams("Battery"))" />
</MudSelect>
<br/>
<MudSelect T="Field" Label="Field" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Class="custom-select">
    <MudSelectItem Value="@(new Field("Lat"))" />
    <MudSelectItem Value="@(new Field("Long"))" />
    <MudSelectItem Value="@(new Field("RPM"))" />
</MudSelect>
@if (showComponent)
{
    <div>
        <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@xAxisLabels_arr" Width="100%" Height="350px" />
    </div>
}
else
{
    <MudText Class="mb-8">Hello - showComponent is false!</MudText>

}


@code {
    private IEnumerable<EnergyData> energyData = Enumerable.Empty<EnergyData>();
    public string[] xAxisLabels_arr = { "e" };
    public static List<double> home = new List<double>();
    public static List<double> pw = new List<double>();
    public static List<double> solar = new List<double>();
    public List<ChartSeries> Series;
    public bool showComponent = false;

    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        energyData = await _iEnergyService.getEnergyData();

        if (energyData.Any())
        {
            home.Clear();
            pw.Clear();
            solar.Clear();
            List<string> xAxisLabels = new List<string>();
            foreach (var data in energyData)
            {
                xAxisLabels.Add(data.eTime);
                home.Add(data.home);
                pw.Add(data.powerwall);
                solar.Add(data.solar);
            }
            xAxisLabels_arr = xAxisLabels.ToArray();
        }

        Series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "Home", Data = home.ToArray() },
            new ChartSeries() { Name = "Powerwall", Data = pw.ToArray() },
            new ChartSeries() { Name = "Solar", Data = solar.ToArray() },
        };
        showComponent = true;
    }

    public class UnitInfo
    {
        public string? UnitId { get; set; }
        public string? UnitName { get; set; }
    }

    public class Streams
    {
        public Streams(string name)
        {
            Name = name;
        }

        public readonly string Name;

        // Note: this is important so the MudSelect can compare streams
       /* public override bool Equals(object o)
        {
            var other = o as Streams;
            return other?.Name == Name;
        }*/

        // Note: this is important too!
        public override int GetHashCode() => Name?.GetHashCode() ?? 0;

        // Implement this for the Streams to display correctly in MudSelect
        public override string ToString() => Name;
    }

    public class Field
    {
        public Field(string name)
        {
            Name = name;
        }

        public readonly string Name;

        // Note: this is important so the MudSelect can compare pizzas
        /*public override bool Equals(object o)
        {
            var other = o as Field;
            return other?.Name == Name;
        }*/

        // Note: this is important too!
        public override int GetHashCode() => Name?.GetHashCode() ?? 0;

        // Implement this for the Field to display correctly in MudSelect
        public override string ToString() => Name;
    }
}

