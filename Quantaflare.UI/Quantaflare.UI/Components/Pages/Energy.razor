@page "/energy"
@using Quantaflare.Data
@using Quantaflare.UI.Services
@inject IEnergyDataClass _iEnergyService;
@inject IEnergyStreamClass _iEnergyStream;
@inject IHttpContextAccessor HttpContextAccessor;

<h3>Welcome to Energy Data</h3>

<MudSelect T="string" Label="Stream" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="selectedStream">
    @if (energyStreams == null)
    {
        <MudSelectItem Value="@("Battery")">Loading...</MudSelectItem>
    }
    else
    {
        @foreach (var eStream in energyStreams)
        {
            <MudSelectItem Value="@eStream.Streams">@eStream.Streams</MudSelectItem>
        }
    }
</MudSelect>
<MudSelect T="string" Label="Field" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="selectedField">
    @if (energyFields == null)
    {
        <MudSelectItem Value="@("RPM")">Loading...</MudSelectItem>
    }
    else
    {
        @foreach (var eField in energyFields)
        {
            <MudSelectItem Value="@eField.Fields">@eField.Fields</MudSelectItem>
        }
    }
</MudSelect>

@if (showComponent)
{
    <div>
        <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@xAxisLabels_arr" Width="100%" Height="350px" />
    </div>
}
else
{
    <MudText Class="mb-8">Hello - showComponent is false!</MudText>

}


@code {
    private IEnumerable<EnergyData> energyData = Enumerable.Empty<EnergyData>();
    private IEnumerable<EnergyStream> energyStreams = Enumerable.Empty<EnergyStream>();
    private string? selectedStream;
    private IEnumerable<EnergyStream> energyFields = Enumerable.Empty<EnergyStream>();
    private string? selectedField;
    public string[] xAxisLabels_arr = { "e" };
    public static List<double> home = new List<double>();
    public static List<double> pw = new List<double>();
    public static List<double> solar = new List<double>();
    public List<ChartSeries> Series;
    public bool showComponent = false;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        energyData = await _iEnergyService.getEnergyData();
        energyStreams = await _iEnergyStream.getEnergyStream();

        energyFields = await _iEnergyStream.getEnergyField();

        if (energyData.Any())
        {
            home.Clear();
            pw.Clear();
            solar.Clear();
            List<string> xAxisLabels = new List<string>();
            foreach (var data in energyData)
            {
                xAxisLabels.Add(data.eTime);
                home.Add(data.home);
                pw.Add(data.powerwall);
                solar.Add(data.solar);
            }
            xAxisLabels_arr = xAxisLabels.ToArray();
        }

        Series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "Home", Data = home.ToArray() },
            new ChartSeries() { Name = "Powerwall", Data = pw.ToArray() },
            new ChartSeries() { Name = "Solar", Data = solar.ToArray() },
        };
        showComponent = true;
    }

    public class UnitInfo
    {
        public string? UnitId { get; set; }
        public string? UnitName { get; set; }
    }

    
    
}

