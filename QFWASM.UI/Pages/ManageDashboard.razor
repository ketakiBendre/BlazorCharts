@page "/managedash"
@using Quantaflare.Data
@inject HttpClient Http
@inject NavigationManager navManager;

<PageTitle>ManageDashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid> <!--outermost grid -->

        <MudItem md="12" sm="12" xs="12">
            <!--main page left column-->

            <MudPaper Class="d-flex flex-column justify-space-between pa-4 mt-5 mb-0" Elevation="2">

                <MudGrid>
          
                    <MudItem xs="12" sm="12" md="12">
                            <MudStack Row = "false">
                                <MudText Typo="Typo.h5">Manage Dashboards </MudText>
                                <MudText Typo="Typo.subtitle1">Create custom dashboards for different clusters </MudText>
                            </MudStack>
                    </MudItem>

                    <MudItem xs="12" sm="4" md="4">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudText>Select Clusters</MudText>
                            <MudSelect T="string" Value="SelectedCluster" Variant="Variant.Outlined" ValueChanged="OnSelectingCluster" AnchorOrigin="Origin.BottomCenter" style="background-color: white;">
                                @foreach (var cluster in clusters)
                                {
                                    <MudSelectItem Value="@cluster.ClusterName">@cluster.ClusterName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudStack>         
                    </MudItem>
                </MudGrid>

                @if (!string.IsNullOrEmpty(SelectedCluster))
                {
                    <MudPaper Elevation="4" class="p-4 mt-4">
                        <!--new dashboard Grid-->
                    <MudGrid>
                        <MudItem xs="8" sm="8" md="8">
                                <MudText Style="font-weight: bold;">Current Dashboards</MudText>
                        </MudItem>
                            <MudItem class="d-flex justify-content-end">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="new-dashboard" OnClick="newDash">New Dashboard</MudButton>
                            </MudItem>
                    </MudGrid>

                        <!-- Data Grid to display Dashboards -->
                    <div class="mt-6;">
                        <MudDataGrid Items="@dashB.Take(10)" Class="custom-width">
                        <Columns>
                            <PropertyColumn Property="x => x.dashName" Title="Dashboard Name"/>
                            <PropertyColumn Property="x => x.createdOn" Title="Created On" />
                                <TemplateColumn CellClass="d-flex justify-end">
                                    <CellTemplate>
                                        <MudStack Row>
                                                <MudButton EndIcon="@Icons.Material.Filled.Edit"
                                                           Variant="@Variant.Filled"
                                                           Color="@Color.Primary"
                                                           OnClick="@(() => editDash(context.Item.dashName))">
                                                    Edit
                                                </MudButton>
                                        </MudStack>
                                    </CellTemplate>
                                </TemplateColumn>
                        </Columns>

                    </MudDataGrid>
                    </div>
                </MudPaper>
                }
            </MudPaper>
        </MudItem>
        
    </MudGrid>

</MudContainer> 




@code {
    public string ClusterValue { get; set; } = String.Empty;
    bool fixedheader = true;
    private string? SelectedCluster;
    private IEnumerable<Cluster> clusters = Enumerable.Empty<Cluster>();
    private IEnumerable<Dashboard> dashB = Enumerable.Empty<Dashboard>();
    private int clusterid=1;


    protected override async Task OnInitializedAsync()
    {
        var cl = await Http.GetFromJsonAsync<Cluster[]>("api/Dashboard/getCluster");
        if (cl!=null)
        {
            clusters = cl;
            SelectedCluster = "Cluster1";
            await FetchDashboardsForCluster();
        }
    }

    private async Task OnSelectingCluster(string name)
    {
        SelectedCluster = name;
        await FetchDashboardsForCluster();
    }

    private async Task FetchDashboardsForCluster()
    {
        //SelectedCluster = name;
        var cluster = clusters.FirstOrDefault(e => e.ClusterName == SelectedCluster);
        if (cluster != null)
        {
            var url = $"api/Dashboard/getDashboard?inputId={cluster.ClusterId}";
            var dBoard = await Http.GetFromJsonAsync<Dashboard[]>(url);
            if (dBoard != null)
            {
                dashB = dBoard;
            }
        }
    }

    private void newDash()
    {
        string mode = "new";
        navManager.NavigateTo($"/newDashboard/{mode}?clusterid={clusterid}");
    }

    private void editDash(string dashName)
    {
        string mode = "edit";
        navManager.NavigateTo($"/newDashboard/{mode}?dashboardName={dashName}&clusterid={clusterid}");
    }
}
