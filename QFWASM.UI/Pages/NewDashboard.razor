@page "/newDashboard/{mode}"
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@using Quantaflare.Data
@inject Services.MyChartService myChartService
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager Navigation


<PageTitle>New Unit Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem md="12" sm="12" xs="12">
            <MudPaper Class="d-flex flex-column justify-space-between pa-4 mt-5 mb-0" Elevation="2">
                <MudGrid>
                     <MudItem xs="12" sm="12" md="12">
                            <MudStack Row = "false">
                                <MudText Typo="Typo.h5">New Unit Dashboard</MudText>
                            </MudStack>

                    </MudItem>

                    <MudItem xs="12" sm="12" md="12">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudTextField @bind-Value="TextValue" Label="Name" Variant="Variant.Outlined"></MudTextField>
                            <MudRadioGroup @bind-Value="Dense_Radio">
                                <MudRadio Value="true" Color="Color.Primary" Dense="true">Unit Dashboard</MudRadio>
                                <MudRadio Value="false" Color="Color.Secondary" Dense="false">Cluster Dashboard</MudRadio>
                        </MudRadioGroup>
                        </MudStack>
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="6" sm="6" md="6" Class="mt-5 ">
                        <MudText Class="mb-5">Select a Widget to be added to dashboard </MudText>
                        <MudIconButton Target="_blank"
                                       Variant="Variant.Outlined"
                                       Icon="@Icons.Material.Filled.MultilineChart"
                                       Color="Color.Primary" OnClick="LineChartPaper" Class="big-icon-button mr-5" />

                        <MudIconButton Target="_blank"
                                   Variant="Variant.Outlined"
                                   Icon="@Icons.Material.Filled.BarChart"
                                       Color="Color.Primary" OnClick="BarChartPaper" Class="big-icon-button mr-5" />
                            
                        <MudIconButton Target="_blank"
                                       Variant="Variant.Outlined"
                                   Icon="@Icons.Material.Filled.PieChart"
                                       Color="Color.Primary" aria-label="PieChart" Class="big-icon-button mr-5" />
                        <MudIconButton Target="_blank"
                                       Variant="Variant.Outlined"
                                       Icon="@Icons.Material.Filled.TableChart"
                                       Color="Color.Primary" aria-label="TimeSeriesTable" Class="big-icon-button mr-5" />

                    </MudItem>
                    
                </MudGrid>
                <MudGrid>
                    <MudContainer Style="text-align: right;">
                        @* <MudButton Color="Color.Primary" OnClick="Save" Variant="Variant.Outlined">Edit</MudButton> *@
                        <MudButton Color="Color.Primary" OnClick="Save" Variant="Variant.Filled">Save dashboard</MudButton>
                    </MudContainer>
                </MudGrid>
            </MudPaper>
        </MudItem>
        @if (showLineChart)
        {
            foreach (var lineChart in lineChartList)
            {

                var position = chartPositions[lineChart]; // Get the position for the current chart

                <MudItem xs="2" sm="2" md="2">
                    <MudPaper @onmousedown="(e) => OnMouseDown(e, lineChart)"
                              @onmouseup="OnMouseUp"
                              @onmousemove="OnMouseMove"
                              style="@($"position: absolute; left: {position.X}px; top: {position.Y}px; cursor: move;")"
                              Elevation="4">
                    <MudText Typo="Typo.h6" Style="text-decoration: underline;">@lineChart.chartTitle</MudText>
                    <div>
                        <MudChart ChartType="ChartType.Line"
                                  ChartSeries="@lineChart.series"
                                  @bind-SelectedIndex="Index"
                                  XAxisLabels="@lineChart.xAxisLabels"
                                  Width="100%"
                                  Height="350px"
                                  ChartOptions="@options" />

                        <MudGrid>
                            @*<MudItem xs="6"> // Need to maintain seprate index for each chart, commenting now
                                <MudText Typo="Typo.body1" Class="py-3">Selected: @(Index < 0 ? "None" : lineChart.series[Index].Name)</MudText>
                            </MudItem>*@
                            <MudItem xs="6">
                                <MudSlider @bind-Value="options.LineStrokeWidth" Min="1" Max="10" Color="Color.Info">Line Width: @options.LineStrokeWidth.ToString()</MudSlider>
                            </MudItem>
                        </MudGrid>
                    </div>
                </MudPaper>
              </MudItem>
            }
        }
    </MudGrid>
</MudContainer>


<style>
    .big-icon-button {
        font-size: 48px; /* Adjust size as needed */
        width: 80px; /* Custom width */
        height: 80px; /* Custom height */
    }
</style>

@code {
    [Parameter]
    public string? clusterid { get; set; } = string.Empty;

    [Parameter]
    public string Mode { get; set; }

    public string TextValue { get; set; } = string.Empty;
    public bool Dense_Radio { get; set; } = true;
    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true, BackdropClick = false};

    private bool showLineChart = false;
    private int Index { get; set; } = -1; // Default selected index
    private string[] xAxisLabels = new string[0];
    private List<MudBlazor.ChartSeries> series = new List<MudBlazor.ChartSeries>();
    private MudBlazor.ChartOptions options = new MudBlazor.ChartOptions();

    private QFChart ReturnedLineChart = new QFChart();
    private Dashboard ds;
    private List<ChartSeriesData> lineChartList = new List<ChartSeriesData>();

    private Dictionary<ChartSeriesData, ChartPosition> chartPositions = new Dictionary<ChartSeriesData, ChartPosition>();
    private bool isDragging = false;
    private double offsetX;
    private double offsetY;
    private ChartSeriesData draggingChart = new ChartSeriesData();

    protected async override Task OnInitializedAsync()
    {
        // Get the URI of the current request
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        // Parse the query parameters
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        clusterid = query["clusterid"]; 

        if (Mode == "new")
        {
            //Set Default name to new dashboard
            TextValue = await setDefaultDashboardName(clusterid);


            ds = new Dashboard();
            ds.clusterId = int.Parse(clusterid);
            ds.createdOn = DateTime.Now;
            ds.dashName = TextValue;
            ds.dashType = Dense_Radio ? "Unit Dashboard" : "Cluster Dashboard";
            var response = await Http.PostAsJsonAsync("api/Dashboard/PostDashboard", ds);
            if (response.IsSuccessStatusCode)
            {
                ds.dashid = await response.Content.ReadFromJsonAsync<int>();
            }
            else
            {
                Console.WriteLine("Failed in creating new Dashboard.");
            }
        }
        else if (Mode == "edit")
        {
            var dashboardName = query["dashboardName"];
            if (dashboardName != null)
            {
                TextValue = dashboardName;
            }
            var url_dashname = $"api/Dashboard/GetDashboardDetails?clusterid={clusterid}&&dashname={dashboardName}";
            ds = await Http.GetFromJsonAsync<Dashboard>(url_dashname);
            if(ds != null)
            {
                Dense_Radio = (ds.dashType == "Unit Dashboard") ? true : false;
                if (ds.QFChartList != null)
                {
                    List<int> chartIdList = new List<int>();
                    foreach (var chart in ds.QFChartList)
                    {
                        foreach (var kvp in chart)
                        {
                            chartIdList.Add(kvp.Key);
                            ChartPosition position = kvp.Value;
                        }
                    }
                    var url_QFChart = $"api/Stream/GetQFChart?chartId={string.Join(",", chartIdList)}";
                    try
                    {
                        var dashboard_qfChartList = await Http.GetFromJsonAsync<QFChart[]>(url_QFChart);
                        if (dashboard_qfChartList != null)
                        {
                            foreach (var dashboard_chart in dashboard_qfChartList)
                            {
                                if (dashboard_chart.chartType == MudBlazor.ChartType.Line)
                                {
                                    showLineChart = true;
                                    var lineSeriesData = await myChartService.GetChartInfo(dashboard_chart.chartDataStreamList.Cast<LineChartData>().ToList());
                                    lineSeriesData.chartTitle = dashboard_chart.chartTitle;
                                    var chartPosition = ds.QFChartList.SelectMany(chartDict => chartDict)
                                                                 .FirstOrDefault(kvp => kvp.Key == dashboard_chart.chartID).Value;
                                    lineChartList.Add(lineSeriesData);
                                    if (chartPosition != null)
                                    {
                                        chartPositions[lineSeriesData] = chartPosition;
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        ShowAlert("No Data to display check other Dashboard !!", Defaults.Classes.Position.BottomRight, Severity.Error);
                    }
                }
            }
        }

    }

    private async Task<string> CreateNewDashboard(string clusterid)
    {
        
    }
    private async Task<string> setDefaultDashboardName(string clusterid)
    {
        string newDashName ="New Dashboard";
        //Get Dashboard name for by default New Dashboard
        var url_dashname = $"api/Dashboard/GetDashboardName?clusterid={clusterid}";
        var response = await Http.GetAsync(url_dashname);
        if (response.IsSuccessStatusCode)
        {
            var responseName = await response.Content.ReadAsStringAsync();
            if (responseName.StartsWith("New Dashboard"))
            {
                var numberPart = responseName.Substring(newDashName.Length).Trim();

                // If the number part is empty, start from 1
                if (string.IsNullOrWhiteSpace(numberPart))
                {
                    // Start from "New Dashboard 1"
                    newDashName = "New Dashboard 1";
                }
                else if (int.TryParse(numberPart, out int dashboardNumber))
                {
                    // If there is a number, increment it
                    dashboardNumber++;

                    // Create the new dashboard name with the incremented number
                    newDashName = $"New Dashboard {dashboardNumber}";
                }
                else
                {
                    // If the number part isn't valid, handle it (optional)
                    Console.WriteLine("The current dashboard name does not have a valid number.");
                }
            }
        }
        
        return newDashName;
    }

    private async Task LineChartPaper()
    {
        
        var parameters = new DialogParameters()
        {
            { "Title", "Add Line Chart" },
            {"ClusterId", clusterid}
        };
        var dialog=DialogService.Show<Components.LineChartComponent>("Custom Options Dialog", parameters, _maxWidth);

        var result = await dialog.Result;

        if (result.Data != null && !result.Canceled)
        {
            
            ReturnedLineChart = (QFChart) result.Data;
            var lineSeriesData = await myChartService.GetChartInfo(ReturnedLineChart.chartDataStreamList.Cast<LineChartData>().ToList());
            lineSeriesData.chartTitle = ReturnedLineChart.chartTitle;
            chartPositions[lineSeriesData] = new ChartPosition { X = 350, Y = 350 };
            lineChartList.Add(lineSeriesData);
            showLineChart = true;
            var chartDetail = new Dictionary<int, ChartPosition>{
                                 { ReturnedLineChart.chartID, new ChartPosition { X = 350, Y = 350 } }
                                };

            ds.QFChartList.Add(chartDetail);
            var response = await Http.PostAsJsonAsync("api/Dashboard/UpdateDashboard", ds);
            if (response.IsSuccessStatusCode)
            {
                var rowsAffected = await response.Content.ReadFromJsonAsync<int>();
                Console.WriteLine($"Received Cluster ID: {rowsAffected}");
            }
        }
    }

    private Task BarChartPaper()
    {
        var parameters = new DialogParameters()
        {
            { "Title", "Add Bar Chart" }
        };

        return DialogService.ShowAsync<Components.BarChartComponent>("Custom Options Dialog", _maxWidth);

    }

    private async Task Save()
    {
        if (string.IsNullOrEmpty(TextValue))
        {
            ShowAlert("Please Enter Dashboard name before saving !!", Defaults.Classes.Position.BottomRight,Severity.Error);
        }
        else
        {
                    Navigation.NavigateTo("/managedash");
                    ShowAlert("Dashboard saved !!", Defaults.Classes.Position.BottomRight,Severity.Success);
        }
    }

    private void Edit()
    {
        if (string.IsNullOrEmpty(TextValue))
        {
            ShowAlert("Please Enter Dashboard name before saving !!", Defaults.Classes.Position.BottomRight,Severity.Error);
        }
        else
        {
            ShowAlert("Dashboard saved !!", Defaults.Classes.Position.BottomRight, Severity.Success);
        }
    }

    private void OnMouseDown(MouseEventArgs e, ChartSeriesData chart)
    {
        isDragging = true;
        draggingChart = chart;
        var position = chartPositions[chart];
        offsetX = e.ClientX - position.X;
        offsetY = e.ClientY - position.Y;
    }

    private void OnMouseUp()
    {
        isDragging = false;
        draggingChart = null; // Clear the dragging chart
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        if (isDragging && draggingChart != null)
        {
            var position = chartPositions[draggingChart];
            position.X = e.ClientX - offsetX;
            position.Y = e.ClientY - offsetY;
            StateHasChanged(); // Refresh the UI
        }
    }


    void ShowAlert(string message, string position,Severity sev)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Add(message, sev, c => c.SnackbarVariant = Variant.Outlined);
    }
    
}
