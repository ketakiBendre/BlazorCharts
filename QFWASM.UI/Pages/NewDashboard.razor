@page "/newDashboard/{mode}"
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@using Quantaflare.Data
@inject Services.MyChartService myChartService
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Linq


<PageTitle>New Unit Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem md="12" sm="12" xs="12">
            <MudPaper Class="d-flex flex-column justify-space-between pa-4 mt-5 mb-5

            " Elevation="2">
                <MudGrid>
                    <MudItem xs="12" sm="12" md="12">
                        <MudStack Row = "false">
                            <MudText Typo="Typo.h5">New Unit Dashboard</MudText>
                        </MudStack>

                    </MudItem>

                    <MudItem xs="12" sm="12" md="12">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudTextField @bind-Value="TextValue" Label="Name" Variant="Variant.Outlined"></MudTextField>
                            <MudRadioGroup @bind-Value="Dense_Radio">
                                <MudRadio Value="true" Color="Color.Primary" Dense="true">Unit Dashboard</MudRadio>
                                <MudRadio Value="false" Color="Color.Secondary" Dense="false">Cluster Dashboard</MudRadio>
                            </MudRadioGroup>
                        </MudStack>
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="6" sm="6" md="6" Class="mt-5 ">
                        <MudText Class="mb-5">Select a Widget to be added to dashboard </MudText>
                        <MudIconButton Target="_blank"
                        Variant="Variant.Outlined"
                        Icon="@Icons.Material.Filled.MultilineChart"
                        Color="Color.Primary" OnClick="LineChartPaper" Class="big-icon-button mr-5" />

                        <MudIconButton Target="_blank"
                        Variant="Variant.Outlined"
                        Icon="@Icons.Material.Filled.BarChart"
                        Color="Color.Primary" OnClick="BarChartPaper" Class="big-icon-button mr-5" Disabled="true" />

                        <MudIconButton Target="_blank"
                        Variant="Variant.Outlined"
                        Icon="@Icons.Material.Filled.PieChart"
                        Color="Color.Primary" aria-label="PieChart" Class="big-icon-button mr-5" Disabled="true" />
                        <MudIconButton Target="_blank"
                        Variant="Variant.Outlined"
                        Icon="@Icons.Material.Filled.TableChart"
                        Color="Color.Primary" OnClick="TimeChartPaper" Class="big-icon-button mr-5" />
                        <MudIconButton Target="_blank"
                        Variant="Variant.Outlined"
                        Icon="@Icons.Material.Filled.Dataset"
                        Color="Color.Primary" OnClick="RawDataPaper" Class="big-icon-button mr-5" />
                        <MudIconButton Target="_blank"
                        Variant="Variant.Outlined"
                        Icon="@Icons.Material.Filled.Map"
                        Color="Color.Primary" OnClick="MapPaper" Class="big-icon-button mr-5" />
                    </MudItem>

                </MudGrid>
                <MudGrid>
                    <MudContainer Style="text-align: right;">
                        @* <MudButton Color="Color.Primary" OnClick="Save" Variant="Variant.Outlined">Edit</MudButton> *@
                        <MudButton Color="Color.Primary" OnClick="Save" Variant="Variant.Filled">Save dashboard</MudButton>
                    </MudContainer>
                </MudGrid>
            </MudPaper>

        </MudItem>

        @if (showChart)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudGrid Id="sortable-grid">
                        @for (int i=0;i<allChartList.Count;i++)
                        {
                            int localindex = i;
                            var displayChart = allChartList[i];
                            var chartData = ds.QFChartList[i];
                            var chartId = chartData.Keys.First(); 
                            var chartBreak = chartData[chartId];

                            <MudItem xs="@chartBreak" data-item-id="@displayChart.chartId">
                                <MudPaper Class="p-2" Style="width: 100%;">
                                    <MudText Typo="Typo.h6" Style="text-decoration: underline;">@displayChart.chartTitle</MudText>
                                    @if (@displayChart.chartType == QChartType.TimeSeries)
                                    {
                                        <MudTimeSeriesChart ChartType="@displayChart.MudChartType"
                                        ChartSeries="@displayChart.tSeries"
                                        @bind-SelectedIndex="@displayChart.Index"
                                        XAxisLabels="@displayChart.xAxisLabels"
                                        Width="100%"
                                        Height="350px"
                                        ChartOptions="@displayChart.options" CanHideSeries TimeLabelSpacing="TimeSpan.FromMinutes(5)" />
                                    }
                                    else if (@displayChart.chartType == QChartType.RawData)
                                    {
                                        <MudStack Spacing="1">
                                            <MudDataGrid Items="@displayChart.rawDataList" Hover="true" Bordered="true" Striped="true" Dense="true" SortMode="SortMode.Single" Virtualize="true" FixedHeader="true" Style="max-width: 100%;">
                                                <Columns>
                                                    <PropertyColumn Property="x => x.Timestamp" Title="Time" />
                                                    @foreach (var column in dynamicColumns)
                                                    {
                                                        <PropertyColumn Property="x => x.Fields[column]" Title="@column" Sortable="false" />
                                                    }
                                                </Columns>
                                            </MudDataGrid>
                                        </MudStack>
                                    }
                                    else if (@displayChart.chartType == QChartType.Map)
                                    {
                                        <MudItem xs="6" sm="12" md="12" Class="mb-4">
                                            <MudRadioGroup @bind-Value="selectedOption" Label="Choose Option" Color="Primary">
                                                <MudRadio Value="true" Color="Color.Primary" Dense="true">Current Location</MudRadio>
                                                <MudRadio Value="false" Color="Color.Secondary" Dense="false">Full Route</MudRadio>
                                            </MudRadioGroup>
                                        </MudItem>
                                        <div id="map" style="width: 100%; height: 500px;"></div>
                                    }
                                    else{
                                        <MudChart ChartType="@displayChart.MudChartType"
                                        ChartSeries="@displayChart.series"
                                        @bind-SelectedIndex="@displayChart.Index"
                                        XAxisLabels="@displayChart.xAxisLabels"
                                        Width="100%"
                                        Height="@CalculateHeight(chartBreak)"
                                        ChartOptions="@displayChart.options" />
                                    }
                                    @if (@displayChart.chartType != QChartType.RawData && @displayChart.chartType != QChartType.Map)
                                    {
                                        <MudGrid>
                                            <MudItem xs="6"> 
                                                <MudText Typo="Typo.body1" Class="py-3">Selected: @(displayChart.Index < 0 ? "None" : displayChart.series[@displayChart.Index].Name)</MudText>
                                            </MudItem>
                                            <MudItem xs="6">
                                                <MudSlider @bind-Value="@displayChart.options.LineStrokeWidth" Min="1" Max="10" Color="Color.Info">Line Width: @displayChart.options.LineStrokeWidth.ToString()</MudSlider>
                                            </MudItem>
                                        </MudGrid>
                                    }
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <MudContainer Style="text-align: right;">
                                                <MudIconButton Icon="@Icons.Material.Filled.ZoomOut" OnClick="(()=>UpdateBreaks(ds.dashid, localindex, -1))" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Secondary" />
                                                <MudIconButton Icon="@Icons.Material.Filled.ZoomIn" OnClick="(()=>UpdateBreaks(ds.dashid, localindex, 1))" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" />
                                            </MudContainer>
                                        </MudItem>
                                    </MudGrid>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                </MudItem>
            </MudGrid>
        }

    </MudGrid>
</MudContainer>


<style>
    .big-icon-button {
    font-size: 48px; /* Adjust size as needed */
    width: 80px; /* Custom width */
    height: 80px; /* Custom height */
    }
</style>

@code {
    [Parameter]
    public string? clusterid { get; set; } = "0";

    [Parameter]
    public string Mode { get; set; }

    public string TextValue { get; set; } = string.Empty;
    public bool Dense_Radio { get; set; } = true;
    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true, BackdropClick = false};

    private bool showChart = false;
    private bool showBarChart = false;
    private string[] xAxisLabels = new string[0];
    private List<MudBlazor.ChartSeries> series = new List<MudBlazor.ChartSeries>();
    private QFChart ReturnedLineChart = new QFChart();
    private Dashboard ds;
    private List<ChartSeriesData> allChartList = new List<ChartSeriesData>();
    public bool selectedOption { get; set; } = true;
    private bool previousSelectedOption;
    int _papers = 0;
    // int papers { get { return _papers; } set { UpdatePapers(value,12); } }
    int papers
    {
        get { return _papers; }
        set
        {
            if (ds != null)
            {
                UpdatePapers(ds.dashid, 12); // Pass the correct Guid value
            }
        }
    }
    public bool reOrdered = false;
    public bool updatebrk = false;
    public List<string> dynamicColumns;

    protected async override Task OnInitializedAsync()
    {
        // Get the URI of the current request
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        // Parse the query parameters
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        clusterid = query["clusterid"]; 
        reOrdered = false;
        updatebrk = false;
        if (Mode == "new")
        {
            //Set Default name to new dashboard
            TextValue = await setDefaultDashboardName(clusterid);
        }
        else if (Mode == "edit")
        {
            var dashboardName = query["dashboardName"];
            ds = await editDashboard(clusterid, dashboardName);
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (firstRender || allChartList.Count > 0)
        {
            await JSRuntime.InvokeVoidAsync("initSortable", "sortable-grid", DotNetObjectReference.Create(this));
            foreach (var chart in allChartList)
            {
                if (chart.chartType == QChartType.Map && chart.locationDetailsList.Any())
                {

                        if (selectedOption)
                        {
                            await ShowMap(chart.locationDetailsList.Last());  // For current location
                        }
                        else
                        {
                        await ShowMapRoute(chart.locationDetailsList.Last());  // For whole route
                        }
                }

            }
        }
    }
    

    [JSInvokable]
    public void OnListReordered(List<string> updatedIds)
    {
        if (ds == null || ds.QFChartList == null) return;

        // Flatten QFChartList into a list of chart data (chartId, break value) while preserving order
        var chartDataList = ds.QFChartList
            .SelectMany(chartData => chartData.Select(kvp => new { ChartId = kvp.Key, BreakValue = kvp.Value }))
            .ToList();

        // Create a mapping of chart IDs to their corresponding chart data
        var chartDataMap = chartDataList.ToDictionary(item => item.ChartId);

        // Reorder allChartList based on the new order in updatedIds
        allChartList = allChartList
            .OrderBy(item => updatedIds.IndexOf(item.chartId.ToString()))
            .ToList();

        reOrdered = true;

        // Reconstruct QFChartList with the reordered chart data
        var newQFChartList = new List<Dictionary<int, int>>();

        foreach (var chart in allChartList)
        {
            var chartId = chart.chartId;

            // Find the corresponding break value for the chart ID
            if (chartDataMap.TryGetValue(chartId, out var chartInfo))
            {
                // Add the reordered chart data to the new QFChartList
                newQFChartList.Add(new Dictionary<int, int>
            {
                { chartId, chartInfo.BreakValue }
            });
            }
        }

        // Replace the old QFChartList with the reordered one
        ds.QFChartList = newQFChartList;

        // Debug: Print updated allChartList and QFChartList for verification
        Console.WriteLine("Updated Line Chart List:");
        foreach (var item in allChartList)
        {
            Console.WriteLine($"Chart ID: {item.chartId}, Chart Title: {item.chartTitle}");
        }

        Console.WriteLine("Updated QFChartList:");
        foreach (var chartData in ds.QFChartList)
        {
            foreach (var kvp in chartData)
            {
                Console.WriteLine($"Chart ID: {kvp.Key}, Break Value: {kvp.Value}");
            }
        }

        StateHasChanged();
    }

    private string CalculateHeight(int chartBreak)
    {
        // Dynamically calculate the height based on chartBreak value.
        return $"{chartBreak * 50}px";
    }

    void UpdateBreaks(Guid dashboardId, int chartIndex, int changeAmount)
    {
        if (ds == null || ds.dashid != dashboardId) return;

        // Ensure the chartIndex is valid
        if (chartIndex >= ds.QFChartList.Count) return;

        var chartData = ds.QFChartList[chartIndex];

        // Get the chart ID and update its break value
        foreach (var chartId in chartData.Keys.ToList()) // Iterate keys
        {
            var currentBreak = chartData[chartId];
            var newBreak = currentBreak + changeAmount;

            // Ensure the break value stays within bounds
            if (newBreak > 12 || newBreak < 1) return;

            // Update the break value
            chartData[chartId] = newBreak;

            // Persist the change back to the `QFChartList`
            ds.QFChartList[chartIndex] = chartData;
            updatebrk = true;
            StateHasChanged();
        }
    }

    void UpdatePapers(Guid dashboardId, int chartCount)
    {
        if (ds == null || !ds.dashid.Equals(dashboardId)) return;

        // Adjust the number of charts in QFChartList
        while (ds.QFChartList.Count < chartCount)
        {
            // Add new chart with default break value of 3
            ds.QFChartList.Add(new Dictionary<int, int> { { 0, 3 } });
        }

        while (ds.QFChartList.Count > chartCount)
        {
            // Remove excess charts
            ds.QFChartList.RemoveAt(ds.QFChartList.Count - 1);
        }


        StateHasChanged();
    }


    private async Task<Dashboard> CreateNewDashboard(Dictionary<int, int> chartDetail = null)
    {
        try
        {
            var url_dashname = $"api/Dashboard/GetDashboardName?clusterid={clusterid}&&newDashName={TextValue}";
            var responseName = await Http.GetAsync(url_dashname);
            if (responseName.IsSuccessStatusCode)
            {
                var dName = await responseName.Content.ReadAsStringAsync();
                if (dName != TextValue)
                {
                    myChartService.ShowAlert($"Dashboard name '{TextValue}' already exists. Please select another one'.", Defaults.Classes.Position.BottomRight, Severity.Warning);
                    return null;
                }
            }

            var newDash = new Dashboard
                {
                    clusterId = int.Parse(clusterid),
                    createdOn = DateTime.Now,
                    dashName = TextValue,
                    dashType = Dense_Radio ? "Unit Dashboard" : "Cluster Dashboard",
                    QFChartList = chartDetail != null ? new List<Dictionary<int, int>> { chartDetail } : []
                };

            var response = await Http.PostAsJsonAsync("api/Dashboard/PostDashboard", newDash);
            if (response.IsSuccessStatusCode)
            {
                newDash.dashid = await response.Content.ReadFromJsonAsync<Guid>();
                return newDash;
            }

            Console.WriteLine("Failed in creating new Dashboard.");
            return null;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HTTP request error: {ex.Message}");
            myChartService.ShowAlert("Failed to create a new dashboard. Please check your network connection and try again.", Defaults.Classes.Position.BottomRight, Severity.Error);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
            myChartService.ShowAlert("An unexpected error occurred while creating a new dashboard.", Defaults.Classes.Position.BottomRight, Severity.Error);
        }

        return null;
    }

    private async Task<Dashboard> editDashboard(string clusterid, string dashboardName)
    {
        DateTimeOffset startTime, endTime;
        Dashboard oldDash = new Dashboard();
        if (dashboardName != null)
        {
            TextValue = dashboardName;
        }
        var url_dashname = $"api/Dashboard/GetDashboardDetails?clusterid={clusterid}&&dashname={dashboardName}";
        oldDash = await Http.GetFromJsonAsync<Dashboard>(url_dashname);
        if (oldDash != null)
        {
            Dense_Radio = (oldDash.dashType == "Unit Dashboard") ? true : false;
            if (oldDash.QFChartList != null)
            {
                List<int> chartIdList = new List<int>();
                foreach (var chart in oldDash.QFChartList)
                {
                    foreach (var kvp in chart)
                    {
                        chartIdList.Add(kvp.Key);

                    }
                }
                var url_QFChart = $"api/Stream/GetQFChart?chartId={string.Join(",", chartIdList)}";
                try
                {
                    var dashboard_qfChartList = await Http.GetFromJsonAsync<QFChart[]>(url_QFChart);
                    if (dashboard_qfChartList != null)
                    {
                        var orderedCharts = chartIdList
                                             .Select(id => dashboard_qfChartList.FirstOrDefault(chart => chart.chartID == id))
                                             .Where(chart => chart != null) 
                                             .ToList();

                        foreach (var dashboard_chart in orderedCharts)
                        {

                            Console.WriteLine($" dashboard charts:{dashboard_chart.chartTitle}");
                            showChart = true;
                            startTime = DateTimeOffset.Now.AddDays(-5).Date;
                            endTime = DateTimeOffset.Now;
                            switch (dashboard_chart.chartType)
                            {
                                case QChartType.Line:
                                    var lineSeriesData = await myChartService.GetLineChartInfo(dashboard_chart.chartDataStreamList.Cast<LineChartData>().ToList());
                                    lineSeriesData.chartTitle = dashboard_chart.chartTitle;
                                    lineSeriesData.chartId = dashboard_chart.chartID;
                                    lineSeriesData.chartType = dashboard_chart.chartType;

                                    allChartList.Add(lineSeriesData);
                                    break;

                                case QChartType.TimeSeries:
                                    var timeSeriesData = await myChartService.GetTimeChartInfo(dashboard_chart.chartDataStreamList.Cast<ChartDataStream>().ToList(), startTime, endTime);
                                    timeSeriesData.chartTitle = dashboard_chart.chartTitle;
                                    timeSeriesData.chartId = dashboard_chart.chartID;
                                    timeSeriesData.chartType = QChartType.TimeSeries;

                                    allChartList.Add(timeSeriesData);
                                    break;
                                case QChartType.Map:
                                    var mapDataList = await myChartService.GetMapDataInfo(dashboard_chart.chartDataStreamList.Cast<ChartDataStream>().ToList(), startTime, endTime);
                                    mapDataList.chartTitle = dashboard_chart.chartTitle;
                                    mapDataList.chartId = dashboard_chart.chartID;
                                    mapDataList.chartType=QChartType.Map;
                                    allChartList.Add(mapDataList);
                                    break;

                                default:
                                    var rawData = await myChartService.GetRawDataInfo(dashboard_chart.chartDataStreamList.Cast<ChartDataStream>().ToList(), startTime, endTime);
                                    rawData.chartTitle = dashboard_chart.chartTitle;
                                    rawData.chartId = dashboard_chart.chartID;
                                    rawData.chartType = QChartType.RawData;
                                    dynamicColumns = rawData.rawDataList.SelectMany(data => data.Fields.Keys).Distinct().ToList();
                                    allChartList.Add(rawData);
                                    break;
                            }

                        }
                    }
                }
                catch (Exception ex)
                {
                    myChartService.ShowAlert("No Data to display check other Dashboard !!", Defaults.Classes.Position.BottomRight, Severity.Error);
                }
            }
        }
        return oldDash;
    }

    private async Task<string> setDefaultDashboardName(string clusterid)
    {
        string newDashName ="New Dashboard";
        //Get Dashboard name for by default New Dashboard
        var url_dashname = $"api/Dashboard/GetDashboardName?clusterid={clusterid}&&newDashName={newDashName}";
        var response = await Http.GetAsync(url_dashname);
        if (response.IsSuccessStatusCode)
        {
            newDashName = await response.Content.ReadAsStringAsync();
        }

        return newDashName;
    }

    private async Task MapPaper()
    {
        QFChart ReturnedDataChart = new QFChart();
        DateTimeOffset startTime, endTime;
        var parameters = new DialogParameters()
        {
            { "Title", "Show Map" },
            {"ClusterId", clusterid}
        };
        var dialog = DialogService.Show<Components.MapComponent>("Custom Options Dialog", parameters, _maxWidth);
        var result = await dialog.Result;
        if (result.Data != null && !result.Canceled)
        {

            ReturnedDataChart = (QFChart)result.Data;
            startTime = DateTimeOffset.Now.AddDays(-5).Date;
            endTime = DateTimeOffset.Now;
            var mapDataList = await myChartService.GetMapDataInfo(ReturnedDataChart.chartDataStreamList.Cast<ChartDataStream>().ToList(), startTime, endTime);
            mapDataList.chartTitle = ReturnedDataChart.chartTitle;
            mapDataList.chartId = ReturnedDataChart.chartID;
            mapDataList.chartType = QChartType.Map;
            allChartList.Add(mapDataList);

            _papers = allChartList.Count;

            var chartDetail = new Dictionary<int, int>{
                                 { ReturnedDataChart.chartID, 4}
                                };
            if (chartDetail != null)
            {

                if (ds == null)
                {
                    ds = await CreateNewDashboard(chartDetail);

                }
                else
                {
                    ds.QFChartList.Add(chartDetail);
                    var response = await Http.PostAsJsonAsync("api/Dashboard/UpdateDashboard", ds);
                    if (response.IsSuccessStatusCode)
                    {
                        var rowsAffected = await response.Content.ReadFromJsonAsync<int>();
                        Console.WriteLine($"Received Cluster ID: {rowsAffected}");
                    }
                }


                //ShowMap(mapDataList.locationDetailsList);
                showChart = true;
                StateHasChanged();
            }
        }
    }

    private async Task ShowMap(LocationDetails location)
    {
        if (location.Latitude != 0 &&
            location.Longitude != 0 &&
            location.ZoomLevel != 0)
        {
            await JSRuntime.InvokeVoidAsync("initializeMapbox", location.Latitude, location.Longitude, location.ZoomLevel);
        }
        else
        {
            Console.WriteLine($"Invalid input: {location.Latitude}, {location.Longitude}, {location.ZoomLevel}");
        }
    }

    private async Task ShowMapRoute(LocationDetails loc)
    {


        if (loc != null)
        {
            List<LocationDetails> locationDetailsList = new List<LocationDetails>();
            Random random = new Random();
            // Generate 5 random locations
            for (int i = 0; i < 5; i++)
            {
                locationDetailsList.Add(new LocationDetails
                    {
                        Latitude = loc.Latitude + (random.NextDouble() * 0.1) - 0.05,  // Small variation
                        Longitude = loc.Longitude + (random.NextDouble() * 0.1) - 0.05
                    });
            }
            var json = JsonSerializer.Serialize(locationDetailsList);
            await JSRuntime.InvokeVoidAsync("initializeMapboxWithRoute", JsonDocument.Parse(json).RootElement);

        }
        else
        {
            Console.WriteLine("No locations to plot.");
        }
    }

    

    private async Task RawDataPaper()
    {
        QFChart ReturnedDataChart = new QFChart();
        DateTimeOffset startTime, endTime;
        var parameters = new DialogParameters()
        {
            { "Title", "Show Raw Data" },
            {"ClusterId", clusterid}
        };
        var dialog = DialogService.Show<Components.RawDataComponent>("Custom Options Dialog", parameters, _maxWidth);

        var result = await dialog.Result;
        if (result.Data != null && !result.Canceled)
        {
            startTime = DateTimeOffset.Now.AddDays(-5).Date;
            endTime = DateTimeOffset.Now;
            ReturnedDataChart = (QFChart)result.Data;
            var rawData = await myChartService.GetRawDataInfo(ReturnedDataChart.chartDataStreamList.Cast<ChartDataStream>().ToList(), startTime, endTime);
            rawData.chartTitle = ReturnedDataChart.chartTitle;
            rawData.chartId = ReturnedDataChart.chartID;
            dynamicColumns = rawData.rawDataList.SelectMany(data => data.Fields.Keys).Distinct().ToList();
            allChartList.Add(rawData);

            _papers = allChartList.Count;

            var chartDetail = new Dictionary<int, int>{
                                 { ReturnedDataChart.chartID, 4}
                                };
            if (chartDetail != null)
            {

                if (ds == null)
                {
                    ds = await CreateNewDashboard(chartDetail);

                }
                else
                {
                    ds.QFChartList.Add(chartDetail);
                    var response = await Http.PostAsJsonAsync("api/Dashboard/UpdateDashboard", ds);
                    if (response.IsSuccessStatusCode)
                    {
                        var rowsAffected = await response.Content.ReadFromJsonAsync<int>();
                        Console.WriteLine($"Received Cluster ID: {rowsAffected}");
                    }
                }
                showChart = true;
                StateHasChanged();
            }
        }
    }


    private async Task TimeChartPaper()
    {
        QFChart ReturnedTimeChart = new QFChart();
        DateTimeOffset startTime, endTime;
        var parameters = new DialogParameters()
        {
            { "Title", "Add Time Chart" },
            {"ClusterId", clusterid}
        };
        var dialog = DialogService.Show<Components.TimeChartComponent>("Custom Options Dialog", parameters, _maxWidth);

        var result = await dialog.Result;
        if (result.Data != null && !result.Canceled)
        {
            startTime =  DateTimeOffset.Now.AddDays(-5).Date;
            endTime =  DateTimeOffset.Now;
            ReturnedTimeChart = (QFChart)result.Data;
            var timeSeriesData = await myChartService.GetTimeChartInfo(ReturnedTimeChart.chartDataStreamList.Cast<ChartDataStream>().ToList(), startTime, endTime);
            timeSeriesData.chartTitle = ReturnedTimeChart.chartTitle;
            timeSeriesData.chartId = ReturnedTimeChart.chartID;
            timeSeriesData.chartType = QChartType.TimeSeries;
            allChartList.Add(timeSeriesData);

            _papers = allChartList.Count;

            var chartDetail = new Dictionary<int, int>{
                                 { ReturnedTimeChart.chartID, 3 }
                                };
            if (chartDetail != null)
            {

                if (ds == null)
                {
                    ds = await CreateNewDashboard(chartDetail);

                }
                else
                {
                    ds.QFChartList.Add(chartDetail);
                    var response = await Http.PostAsJsonAsync("api/Dashboard/UpdateDashboard", ds);
                    if (response.IsSuccessStatusCode)
                    {
                        var rowsAffected = await response.Content.ReadFromJsonAsync<int>();
                        Console.WriteLine($"Received Cluster ID: {rowsAffected}");
                    }
                }
                showChart = true;
                StateHasChanged();
            }
        }
    }

    private async Task LineChartPaper()
    {

        var parameters = new DialogParameters()
        {
            { "Title", "Add Line Chart" },
            {"ClusterId", clusterid}
        };
        var dialog=DialogService.Show<Components.LineChartComponent>("Custom Options Dialog", parameters, _maxWidth);

        var result = await dialog.Result;

        if (result.Data != null && !result.Canceled)
        {

            ReturnedLineChart = (QFChart) result.Data;
            var lineSeriesData = await myChartService.GetLineChartInfo(ReturnedLineChart.chartDataStreamList.Cast<LineChartData>().ToList());
            lineSeriesData.chartTitle = ReturnedLineChart.chartTitle;
            lineSeriesData.chartId = ReturnedLineChart.chartID;
            lineSeriesData.chartType =QChartType.Line;
            allChartList.Add(lineSeriesData);

            _papers = allChartList.Count;

            var chartDetail = new Dictionary<int, int>{
                                 { ReturnedLineChart.chartID, 3 }
                                };
            if (chartDetail != null)
            {

                if (ds == null)
                {
                    ds = await CreateNewDashboard(chartDetail);

                }
                else
                {
                    ds.QFChartList.Add(chartDetail);
                    var response = await Http.PostAsJsonAsync("api/Dashboard/UpdateDashboard", ds);
                    if (response.IsSuccessStatusCode)
                    {
                        var rowsAffected = await response.Content.ReadFromJsonAsync<int>();
                        Console.WriteLine($"Received Cluster ID: {rowsAffected}");
                    }
                }
                showChart = true;
                StateHasChanged();
            }
        }
    }

    private Task BarChartPaper()
    {
        var parameters = new DialogParameters()
        {
            { "Title", "Add Bar Chart" },
            {"ClusterId", clusterid}
        };

        return DialogService.ShowAsync<Components.BarChartComponent>("Custom Options Dialog", parameters, _maxWidth);

    }

    private async Task Save()
    {
        if (string.IsNullOrEmpty(TextValue))
        {
            myChartService.ShowAlert("Please enter a Dashboard name before saving!", Defaults.Classes.Position.BottomRight, Severity.Error);
            return;
        }

        ds ??= await CreateNewDashboard();
        if (ds == null) return;

        if (TextValue != ds.dashName)
        {
            var url_dashname = $"api/Dashboard/GetDashboardName?clusterid={clusterid}&&newDashName={TextValue}";
            var response = await Http.GetAsync(url_dashname);
            if (response.IsSuccessStatusCode)
            {
                var dName = await response.Content.ReadAsStringAsync();
                if (dName != TextValue)
                {
                    myChartService.ShowAlert($"Dashboard name '{TextValue}' already exists. Please select another one'.", Defaults.Classes.Position.BottomRight, Severity.Warning);
                    return;
                }
                ds.dashName = TextValue;
            }
        }
        if (Dense_Radio != (ds.dashType == "Unit Dashboard")) ds.dashType = Dense_Radio ? "Unit Dashboard" : "Cluster Dashboard";
        if (updatebrk || reOrdered){
            var serializedChartList = JsonSerializer.Serialize(ds.QFChartList);
            var updatedDashboard = new
            {
                ds.dashid,
                ds.dashName,
                ds.dashType,
                QFChartList = serializedChartList
            };
        }

        await Http.PostAsJsonAsync("api/Dashboard/UpdateDashboard", ds);
        Navigation.NavigateTo("/managedash");
    }
  
}
