@page "/newDashboard"
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@using Quantaflare.Data


<PageTitle>New Unit Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem md="12" sm="12" xs="12">
            <MudPaper Class="d-flex flex-column justify-space-between pa-4 mt-5 mb-0" Elevation="2">
                <MudGrid>
                     <MudItem xs="12" sm="12" md="12">
                            <MudStack Row = "false">
                                <MudText Typo="Typo.h5">New Unit Dashboard @clusterid</MudText>
                            </MudStack>

                    </MudItem>

                    <MudItem xs="12" sm="12" md="12">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudTextField @bind-Value="TextValue" Label="Name" Variant="Variant.Outlined"></MudTextField>
                            <MudRadioGroup @bind-Value="Dense_Radio">
                                <MudRadio Value="true" Color="Color.Primary" Dense="true">Unit Dashboard</MudRadio>
                                <MudRadio Value="false" Color="Color.Secondary" Dense="false">Cluster Dashboard</MudRadio>
                        </MudRadioGroup>
                        </MudStack>
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="6" sm="6" md="6" Class="mt-5 ">
                        <MudText Class="mb-5">Select a Widget to be added to dashboard </MudText>
                        <MudIconButton Target="_blank"
                                       Variant="Variant.Outlined"
                                       Icon="@Icons.Material.Filled.MultilineChart"
                                       Color="Color.Primary" OnClick="LineChartPaper" Class="big-icon-button mr-5" />

                        <MudIconButton Target="_blank"
                                   Variant="Variant.Filled"
                                   Icon="@Icons.Material.Filled.BarChart"
                                       Color="Color.Primary" OnClick="BarChartPaper" Class="big-icon-button mr-5" />
                            
                        <MudIconButton Target="_blank"
                                   Variant="Variant.Outlined"
                                   Icon="@Icons.Material.Filled.PieChart"
                                       Color="Color.Primary" aria-label="PieChart" Class="big-icon-button mr-5" />
                        <MudIconButton Target="_blank"
                                       Variant="Variant.Outlined"
                                       Icon="@Icons.Material.Filled.TableChart"
                                       Color="Color.Primary" aria-label="TimeSeriesTable" Class="big-icon-button mr-5" />
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        @if (showLineChart)
        {
            <MudItem xs="6" sm="6" md="6">
                <MudPaper>
                    <MudText>@ReturnedLineChart.charttitle</MudText>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudContainer>


<style>
    .big-icon-button {
        font-size: 48px; /* Adjust size as needed */
        width: 80px; /* Custom width */
        height: 80px; /* Custom height */
    }
</style>

@code {
    [Parameter]
    public string? clusterid { get; set; } = string.Empty;

    public string TextValue { get; set; } = string.Empty;
    public bool Dense_Radio { get; set; } = true;
    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };

    private bool showLineChart = false;

    private ChartData ReturnedLineChart = new ChartData();

    protected override void OnInitialized()
    {
        // Get the URI of the current request
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        // Parse the query parameters
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        clusterid = query["clusterid"]; // Retrieve the value of 'clusterid'

        // Log to console for debugging
        Console.WriteLine($"Received Cluster ID: {clusterid}");
    }



    private async Task LineChartPaper()
    {
        var parameters = new DialogParameters()
        {
            { "Title", "Add Line Chart" },
            {"ClusterId", clusterid}
        };
        var dialog=DialogService.Show<Components.LineChartComponent>("Custom Options Dialog", parameters, _maxWidth);

        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            ReturnedLineChart = (ChartData) result.Data;
            showLineChart = true;
        }
    }

    private Task BarChartPaper()
    {
        var parameters = new DialogParameters()
        {
            { "Title", "Add Bar Chart" }
        };

        return DialogService.ShowAsync<Components.BarChartComponent>("Custom Options Dialog", _maxWidth);

    }
    
}
