@using MudBlazor
@using Quantaflare.Data
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudDialog>
    <TitleContent>
        <strong>@Title</strong>
    </TitleContent>
    <DialogContent>
        
         <MudContainer Class="mt-4">

             <MudGrid>
                <MudItem xs="6" sm="12" md="12">
                    <MudText Typo="Typo.h5" Color="Color.Primary">Adding a Line chart @clusterid</MudText>
                </MudItem>

                <MudItem xs="6" sm="12" md="12">
                    <MudTextField @bind-Value="ChartTitle" Label="Chart Title" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="6" sm="6" md="6" Class="mb-4">
                    <MudCard>
                             <MudCardContent>
                                <MudItem xs="12" sm="10" md="10">
                                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                                        <MudSelect T="string" @bind-Value="selectedStream" Label="Stream" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" style="background-color: white;">
                                        @if (loadStreamField == null)
                                        {
                                            <MudSelectItem Value="@("Battery")">Loading...</MudSelectItem>
                                        }
                                        else
                                        {
                                            @foreach (var lStream in loadStreams)
                                            {
                                                <MudSelectItem T="string" Value="@lStream.StreamName">@lStream.StreamName</MudSelectItem>
                                            }
                                        }
                                        </MudSelect>
                                        <MudSelect T="string" @bind-Value="selectedField" Label="Field" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" style="background-color: white;">
                                            @if (loadStreamField == null)
                                            {
                                                <MudSelectItem Value="@("RPM")">Loading...</MudSelectItem>
                                            }
                                            else
                                            {
                                                @if (loadStreamField.Any(h => h.Streams == selectedStream))
                                                {
                                                    @foreach (var eField in loadStreamField.Where(e => e.Streams == selectedStream))
                                                    {
                                                        <MudSelectItem T="string" Value="@eField.Fields">@eField.Fields</MudSelectItem>
                                                    }
                                                }
                                            }
                                        </MudSelect>
                                        <MudSelect T="string" @bind-Value="selectedAgr" Label="Agreegator" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" style="background-color: white;">
                                            <MudSelectItem Value="@("Avg")">Avg</MudSelectItem>
                                            <MudSelectItem Value="@("Count")">Count</MudSelectItem>
                                            <MudSelectItem Value="@("Max")">Max</MudSelectItem>
                                            <MudSelectItem Value="@("Min")">Min</MudSelectItem>
                                        </MudSelect>
                                    </MudStack>
                                </MudItem>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Disabled="!IsAddButtonEnabled" OnClick="AddItem" Color="Color.Primary">Add</MudButton>
                            </MudCardActions>
                        </MudCard>
                </MudItem>
    
                <MudItem xs="12" sm="6" md="6">
                    <MudCard>
                        <MudCardHeader>
                            <MudText>Widget Preview of this Selection</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>Display Chart</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                @if (eStreamList.Count > 0)
                {
                    <MudItem xs="12" sm="6" md="6"> 
                        <div class="mt-6;">
                            <MudDataGrid Items="@eStreamList.Take(4)" Class="custom-width">
                                <Columns>
                                    <PropertyColumn Property="x => x.Streams" Title="Stream"/>
                                    <PropertyColumn Property="x => x.Fields" Title="Field" />
                                    <PropertyColumn Property="x => x.agr" Title="Agreegator" />
                                    <TemplateColumn CellClass="d-flex justify-end">
                                        <CellTemplate>
                                            <MudStack Row>
                                                <MudButton EndIcon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteStream(context.Item))"></MudButton>
                                            </MudStack>
                                        </CellTemplate>
                                    </TemplateColumn>
                                </Columns>

                            </MudDataGrid>
                        </div>
                    </MudItem>
                }
            </MudGrid>
         </MudContainer> 

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Save" Variant="Variant.Outlined" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="Close" Variant="Variant.Outlined" Color="Color.Primary">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    public MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string clusterid { get; set; } = string.Empty;

    public string ChartTitle { get; set; } = string.Empty;

    private string selectedStream;
    private string selectedField;
    private string selectedAgr;
    private List<EnergyStream> eStreamList = new List<EnergyStream>();
    private List<EnergyStream> loadStreamField = new List<EnergyStream>();
    private List<Streams> loadStreams = new List<Streams>();

    private List<string> items = new List<string>();
    private bool IsAddButtonEnabled => selectedStream != null && selectedField != null && selectedAgr != null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        int id = int.Parse(clusterid);

         var url = $"api/Stream/getStreams?inputId={id}";
        var lStreams = await Http.GetFromJsonAsync<Streams[]>(url);
        if (lStreams != null)
        {
            loadStreams = lStreams.ToList();
        }

        var url_field = $"api/Stream/getStreamAndField?inputId={id}";
        var streamFields = await Http.GetFromJsonAsync<EnergyStream[]>(url_field);
        if (streamFields != null)
        {
            loadStreamField = streamFields.ToList();
        }
    }

    private void AddItem()
    {
        EnergyStream eStream = new EnergyStream();

        eStream.Streams = selectedStream;
        eStream.Fields = selectedField;
        eStream.agr = selectedAgr;

        if (!eStreamList.Any(p => p.Equals(eStream)))
        {
            eStreamList.Add(eStream);
            /*Clear Selection*/
            selectedStream = selectedField = selectedAgr = null;
        }
        else
        {
            ShowAlert("Please Select Different variation than existing in Grid !!", Defaults.Classes.Position.BottomRight);
        }
    }

    private void DeleteStream(EnergyStream DeleteEStream)
    {
        eStreamList.Remove(DeleteEStream);
    }

    private void Close() => MudDialog.Close();

    private void Save()
    {
        if (string.IsNullOrEmpty(ChartTitle))
        {
            ShowAlert("Please Enter Chart Title to Save Dashboard !!", Defaults.Classes.Position.BottomRight);
        }
        else
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void ShowAlert(string message, string position)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Add(message, Severity.Error, c => c.SnackbarVariant = Variant.Outlined);
    }
}