@using MudBlazor
@using Quantaflare.Data
@inject ISnackbar Snackbar
@inject HttpClient Http
@using System.Text.Json;
@inject Services.MyChartService myChartService

<MudDialog>
    <TitleContent>
        <strong>@Title</strong>
    </TitleContent>
    <DialogContent>

        <MudContainer Class="mt-4">

            <MudGrid>
                <MudItem xs="6" sm="12" md="12">
                    <MudText Typo="Typo.h5" Color="Color.Primary">Showing a Raw Data</MudText>
                </MudItem>

                <MudItem xs="6" sm="12" md="12">
                    <MudTextField @bind-Value="ChartTitle" Label="Chart Title" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                
                <MudItem xs="6" sm="12" md="12" Class="mb-4">
                    <MudSwitch @bind-Value="UseDropdown" Label="Use Dropdowns for Chart defination" />
                </MudItem>

                
                @if (UseDropdown)
                {
                    <MudItem xs="12" sm="6" md="6" Class="mb-4">
                        <MudStack Row="false">
                            <MudCard>
                                <MudCardContent>
                                    <MudItem xs="12" sm="10" md="10">
                                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                                            <MudSelect T="string" @bind-Value="selectedStream" Label="Stream" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" style="background-color: white;">
                                                @if (loadStreamField == null)
                                                {
                                                    <MudSelectItem Value="@("Battery")">Loading...</MudSelectItem>
                                                }
                                                else
                                                {
                                                    @foreach (var lStream in loadStreams)
                                                    {
                                                        <MudSelectItem T="string" Value="@lStream.StreamName">@lStream.StreamName</MudSelectItem>
                                                    }
                                                }
                                            </MudSelect>

                                            <MudSelect T="string" @bind-Value="selectedField" Label="Field" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" style="background-color: white;">
                                                @if (loadStreamField == null)
                                                {
                                                    <MudSelectItem Value="@("RPM")">Loading...</MudSelectItem>
                                                }
                                                else
                                                {
                                                    @if (loadStreamField.Any(h => h.Streams == selectedStream))
                                                    {
                                                        @foreach (var eField in loadStreamField.Where(e => e.Streams == selectedStream))
                                                        {
                                                            <MudSelectItem T="string" Value="@eField.Fields">@eField.Fields</MudSelectItem>
                                                        }
                                                    }
                                                }
                                            </MudSelect>
                                        </MudStack>
                                    </MudItem>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Disabled="!IsAddButtonEnabled" OnClick="AddItem" Color="Color.Primary">Add</MudButton>
                                </MudCardActions>
                            </MudCard>

                            @if (timeChartList.Count > 0)
                            {
                                <div class="mt-6;">
                                    <MudDataGrid Items="@timeChartList.Take(4)" Class="custom-width">
                                        <Columns>
                                            <PropertyColumn Property="x => x.stream" Title="Stream" />
                                            <PropertyColumn Property="x => x.field" Title="Field" />
                                            <TemplateColumn CellClass="d-flex justify-end">
                                                <CellTemplate>
                                                    <MudStack Row>
                                                        <MudButton EndIcon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteStream(context.Item, rawDataList))"></MudButton>
                                                    </MudStack>
                                                </CellTemplate>
                                            </TemplateColumn>
                                        </Columns>

                                    </MudDataGrid>
                                </div>
                            }
                        </MudStack>

                    </MudItem>
                }
                else
                {
                    <!--THis is the new style by amol - lets see-->
                    <MudItem xs="12" sm="6" md="6" Class="mb-4">

                        <MudStack Row="false">

                            <MudCard>
                                <MudCardContent>
                                    <MudItem xs="12" sm="10" md="10">
                                        <MudStack Row="true" class="d-flex justify-space-between flex-grow-1 gap-4">


                                            <MudList T="string" @bind-SelectedValue="selectedStream" Label="Stream" Variant="Variant.Outlined"
                                                     SelectionMode="SelectionMode.SingleSelection" AnchorOrigin="Origin.BottomCenter" style="background-color: white;">
                                                <MudListSubheader>
                                                    <MudStack Row=false AlignItems="AlignItems.Center">
                                                        <MudText Typo="Typo.h6" Color="Color.Secondary">Stream:</MudText>
                                                    </MudStack>
                                                </MudListSubheader>
                                                @if (loadStreamField == null)
                                                {
                                                    <MudListItem Value="@("Battery")">Loading...</MudListItem>
                                                }
                                                else
                                                {
                                                    @foreach (var lStream in loadStreams)
                                                    {
                                                        <MudListItem T="string" Value="@lStream.StreamName">@lStream.StreamName</MudListItem>
                                                    }
                                                }
                                            </MudList>




                                            <MudList T="string" @bind-SelectedValue="selectedField" Label="Field" Variant="Variant.Outlined"
                                                     SelectionMode="SelectionMode.SingleSelection" AnchorOrigin="Origin.BottomCenter" style="background-color: white;">
                                                <MudListSubheader>
                                                    <MudStack Row=false AlignItems="AlignItems.Center">
                                                        <MudText Typo="Typo.h6" Color="Color.Secondary">Field:</MudText>
                                                    </MudStack>
                                                </MudListSubheader>
                                                @if (loadStreamField == null)
                                                {
                                                    <MudListItem Value="@("RPM")">Loading...</MudListItem>
                                                }
                                                else
                                                {
                                                    @if (loadStreamField.Any(h => h.Streams == selectedStream))
                                                    {
                                                        @foreach (var eField in loadStreamField.Where(e => e.Streams == selectedStream))
                                                        {
                                                            <MudListItem T="string" Value="@eField.Fields">@eField.Fields</MudListItem>
                                                        }
                                                    }
                                                }
                                            </MudList>
                                        </MudStack>
                                        <!--stack end -->

                                    </MudItem>
                                </MudCardContent>
                                <MudCardActions Class="d-flex flex-grow-1 justify-end mb-4">
                                    <MudButton Disabled="!IsAddButtonEnabled" OnClick="AddItem" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                                </MudCardActions>
                            </MudCard>

                            @if (timeChartList.Count > 0)
                            {
                                <div class="mt-6;">
                                    <MudDataGrid Items="@timeChartList.Take(4)" Class="custom-width">
                                        <Columns>
                                            <PropertyColumn Property="x => x.stream" Title="Stream" />
                                            <PropertyColumn Property="x => x.field" Title="Field" />
                                            <TemplateColumn CellClass="d-flex justify-end">
                                                <CellTemplate>
                                                    <MudStack Row>
                                                        <MudButton EndIcon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteStream(context.Item,rawDataList))"></MudButton>
                                                    </MudStack>
                                                </CellTemplate>
                                            </TemplateColumn>
                                        </Columns>

                                    </MudDataGrid>
                                </div>
                            }
                        </MudStack>

                    </MudItem>
                }


                <!--This is for preview pane-->

                <MudItem xs="12" sm="6" md="6">
                    <MudCard Class="mb-4">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6" Color="Color.Primary">Preview</MudText>
                        </MudCardHeader>
                        <MudCardContent>

                            @if (showComponent)
                            {
                                <div>
                                    <MudDataGrid Items="@rawDataList" Bordered="true" Hover="true" Striped="true" Dense="true">
                                        <Columns>
                                            <!-- Static Timestamp Column -->
                                            <PropertyColumn Property="x => x.Timestamp" Title="Time"/>

                                            <!-- Dynamic Columns -->
                                            @foreach (var column in dynamicColumns)
                                            {
                                               
                                                <PropertyColumn Property="x => x.Fields[column]" Title="@column"/>
                                            }
                                        </Columns>
                                    </MudDataGrid>

                                </div>

                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Please add fields from streams to preview sample data </MudText>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>

            </MudGrid>

        </MudContainer>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close" Variant="Variant.Text" Color="Color.Primary">Close</MudButton>
        <MudButton OnClick="Save" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string clusterid { get; set; } = string.Empty;

    public string ChartTitle { get; set; } = string.Empty;

    private string selectedStream;
    private string selectedField;
    private string selectedAgr;
    private List<ChartDataStream> timeChartList = new List<ChartDataStream>();

    private List<EnergyStream> loadStreamField = new List<EnergyStream>();
    private List<Streams> loadStreams = new List<Streams>();
    public bool showComponent = false;

    private List<ChartDataResult> chartDataList;
    private int Index { get; set; } = -1;
    private MudBlazor.ChartOptions options = new MudBlazor.ChartOptions();
    private ChartSeriesData chartSeriesData = new ChartSeriesData();
    private List<RawData> rawDataList = new List<RawData>();

    private bool IsAddButtonEnabled => selectedStream != null && selectedField != null;

    public bool UseDropdown { get; set; } = false;

    private DateTimeOffset startTime;
    private DateTimeOffset endTime;
    private List<string> dynamicColumns;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        int id = int.Parse(clusterid);

        var url = $"api/Stream/getStreams?inputId={id}";
        var lStreams = await Http.GetFromJsonAsync<Streams[]>(url);
        if (lStreams != null)
        {
            loadStreams = lStreams.ToList();
        }

        var url_field = $"api/Stream/getStreamAndField?inputId={id}";
        var streamFields = await Http.GetFromJsonAsync<EnergyStream[]>(url_field);
        if (streamFields != null)
        {
            loadStreamField = streamFields.ToList();
        }
    }

    private async Task AddItem()
    {
        ChartDataStream timeChart = new ChartDataStream();
        timeChart.stream = selectedStream;
        timeChart.field = selectedField;
        startTime = DateTimeOffset.Now.AddDays(-5).Date;
        endTime = DateTimeOffset.Now;
        if (!timeChartList.Any(p => p.stream == timeChart.stream && p.field == timeChart.field))
        {
            timeChartList.Add(timeChart);


            /*Display chart*/
            rawDataList = await myChartService.GetRawDataInfo(timeChartList, startTime, endTime);
            dynamicColumns=rawDataList.SelectMany(data => data.Fields.Keys).Distinct().ToList();
            showComponent = true;


            /*Clear Selection*/
            selectedStream = selectedField = null;
        }
        else
        {
            ShowAlert("Please Select Different variation than existing in Grid !!", Defaults.Classes.Position.BottomRight);
        }
    }

    private async Task DeleteStream(ChartDataStream DeleteEStream, List<RawData> rawDataList)
    {
        timeChartList.Remove(DeleteEStream);
        dynamicColumns.Remove(DeleteEStream.field.ToLower());
        /*Display chart*/
        rawDataList = myChartService.RemoveRawData(DeleteEStream, rawDataList);


        showComponent = true;
    }

    private void Close() => MudDialog.Close();

    private async Task Save()
    {
        if (string.IsNullOrEmpty(ChartTitle))
        {
            ShowAlert("Please Enter Chart Title to Save !!", Defaults.Classes.Position.BottomRight);
        }
        else if (timeChartList.Any())
        {
            QFChart cData = new QFChart();
            cData.chartTitle = ChartTitle;
           
            foreach (var timeChart in timeChartList)
            {
                cData.chartDataStreamList.Add(timeChart);
            }

            var response = await Http.PostAsJsonAsync("api/Stream/PostQFChart", cData);
            if (response.IsSuccessStatusCode)
            {
                int chartId = await response.Content.ReadFromJsonAsync<int>(); // Read the returned chartId
                if (chartId > -1) // Check if a valid chartId was returned
                {
                    cData.chartID = chartId;
                    MudDialog.Close(DialogResult.Ok(cData));
                    ShowAlert($"Chart saved with ID: {chartId} !!", Defaults.Classes.Position.BottomRight);
                }
            }
            else
            {
                // Handle the error response (optional)
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Error saving chart: {errorMessage}", Defaults.Classes.Position.BottomRight);
            }
        }
        else
        {
            ShowAlert("Please Select Streams, Fields for TimeSeries chart !!", Defaults.Classes.Position.BottomRight);
        }
    }

    void ShowAlert(string message, string position)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Add(message, Severity.Error, c => c.SnackbarVariant = Variant.Outlined);
    }


    public class ChartOptions
    {
        public double LineStrokeWidth { get; set; } = 2; // Default value
    }
}


